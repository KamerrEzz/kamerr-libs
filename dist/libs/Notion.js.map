{"version":3,"file":"Notion.js","sourceRoot":"","sources":["../../src/libs/Notion.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport { Client } from '@notionhq/client';\r\nimport { User, PropertyFilter, insertRow } from '../types/NotionCustom';\r\nimport fs from 'fs';\r\n\r\nclass NotionService {\r\n\tNotion: Client;\r\n\tdb: any;\r\n\tstorage: string;\r\n\r\n\tconstructor({ token, databaseId, storage }) {\r\n\t\tthis.Notion = new Client({\r\n\t\t\tauth: token,\r\n\t\t});\r\n\t\tthis.db = databaseId;\r\n\t\tthis.storage = storage;\r\n\r\n\t\tif (this.storage) {\r\n\t\t\tif (this._exists()) return;\r\n\t\t\tthis.dbCreate();\r\n\t\t}\r\n\t}\r\n\tgetUsers = async (): Promise<User[]> => {\r\n\t\tconst users: any = await this.Notion.users.list({});\r\n\t\tconst typePerson = users.results.find((user) => user.type == 'person');\r\n\t\treturn typePerson;\r\n\t};\r\n\r\n\tgetDatabase = async () => {\r\n\t\tconst database = await this.Notion.databases.retrieve({\r\n\t\t\tdatabase_id: this.db,\r\n\t\t});\r\n\t\treturn database;\r\n\t};\r\n\r\n\tgetDatabaseProperties = async () => {\r\n\t\tconst database = await this.getDatabase();\r\n\t\tconst properties = database.properties;\r\n\t\treturn properties;\r\n\t};\r\n\r\n\tgetDatabasePropertiesKeys = async () => {\r\n\t\tconst properties = await this.getDatabaseProperties();\r\n\t\tconst keys = Object.keys(properties);\r\n\t\treturn keys;\r\n\t};\r\n\r\n\tgetDatabasePropertiesValues = async () => {\r\n\t\tconst properties = await this.getDatabaseProperties();\r\n\t\tconst values = Object.values(properties);\r\n\t\treturn values;\r\n\t};\r\n\r\n\tinsertRow = async (data: insertRow) => {\r\n\t\t// @ts-ignore\r\n\t\tconst response = await this.Notion.pages.create({\r\n\t\t\tparent: { database_id: this.db },\r\n\t\t\tproperties: data,\r\n\t\t});\r\n\t\treturn response;\r\n\t};\r\n\r\n\tgetRows = async () => {\r\n\t\tconst response = await this.Notion.databases.query({\r\n\t\t\tdatabase_id: this.db,\r\n\t\t});\r\n\t\treturn response;\r\n\t};\r\n\r\n\tgetRow = async (id: string) => {\r\n\t\tconst response = await this.Notion.pages.retrieve({\r\n\t\t\tpage_id: id,\r\n\t\t});\r\n\t\treturn response;\r\n\t};\r\n\r\n\tgetFilterRow = async (filter: PropertyFilter) => {\r\n\t\tconst response = await this.Notion.databases.query({\r\n\t\t\tdatabase_id: this.db,\r\n\t\t\tfilter: filter,\r\n\t\t});\r\n\t\treturn response;\r\n\t};\r\n\r\n\tparseRow = (row: {id: string, properties: object}): {id: string, [key: string]: any} => {\r\n\t\tconst properties = row.properties;\r\n\t\tconst keys = Object.keys(properties);\r\n\t\tconst values = Object.values(properties);\r\n\t\tconst data = {\r\n\t\t\tid: row.id,\r\n\t\t};\r\n\r\n\t\tkeys.forEach((key, index) => {\r\n\t\t\tconst value = values[index];\r\n\t\t\tif (value.type == 'title') {\r\n\t\t\t\tdata[key] = value.title.length > 0 ? value.title[0].plain_text : false;\r\n\t\t\t} else if (value.type == 'rich_text') {\r\n\t\t\t\tdata[key] =\r\n\t\t\t\t\tvalue.rich_text.length > 0 ? value.rich_text[0].plain_text : false;\r\n\t\t\t} else if (value.type == 'multi_select') {\r\n\t\t\t\tdata[key] =\r\n\t\t\t\t\tvalue.multi_select.length > 0\r\n\t\t\t\t\t\t? value.multi_select.map((item: any) => ({\r\n\t\t\t\t\t\t\t\tid: item.id,\r\n\t\t\t\t\t\t\t\tname: item.name,\r\n\t\t\t\t\t\t  }))\r\n\t\t\t\t\t\t: false;\r\n\t\t\t} else if (value.type == 'select') {\r\n\t\t\t\tdata[key] = value.select\r\n\t\t\t\t\t? { id: value.select.id, name: value.select.name }\r\n\t\t\t\t\t: false;\r\n\t\t\t} else if (value.type == 'number') {\r\n\t\t\t\tdata[key] = value.number ? value.number : false;\r\n\t\t\t} else {\r\n\t\t\t\tdata[key] = value[value.type];\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn data;\r\n\t};\r\n\r\n\tparseRows = (rows: {id: string, properties: object}[]): object[] => {\r\n\t\tconst data = [];\r\n\t\trows.forEach((row) => data.push(this.parseRow(row)));\r\n\t\treturn data;\r\n\t};\r\n\r\n\tdbGet = (): Promise<object[]> => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst folder = 'tmp';\r\n\t\t\tconst file = `${folder}/notion-${this.storage}.json`;\r\n\r\n\t\t\tif (!fs.existsSync(folder)) {\r\n\t\t\t\tfs.mkdirSync(folder);\r\n\t\t\t}\r\n\r\n\t\t\tif (!fs.existsSync(file)) {\r\n\t\t\t\tfs.writeFileSync(file, JSON.stringify([]));\r\n\t\t\t}\r\n\r\n\t\t\tconst data: any = fs.readFileSync(file);\r\n\t\t\tconst json = JSON.parse(data);\r\n\t\t\tresolve(json);\r\n\t\t});\r\n\t};\r\n\r\n\tdbFind = (query: { [key: string]: string | number | boolean }): Promise<object[] | boolean> => {\r\n\t\treturn new Promise(async (resolve, _reject) => {\r\n\t\t\tconst data = await this.dbGet();\r\n\t\t\tconst keys = Object.keys(query);\r\n\t\t\tconst values = Object.values(query);\r\n\t\t\tconst result = data.filter((item) => {\r\n\t\t\t\tlet valid = true;\r\n\t\t\t\tkeys.forEach((key, index) => {\r\n\t\t\t\t\tif (item[key] != values[index]) {\r\n\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn valid;\r\n\t\t\t});\r\n\t\t\tif (result.length > 0) {\r\n\t\t\t\tresolve(result);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(false);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tgetFindOne = (query: { [key: string]: string | number | boolean }) => {\r\n\t\treturn new Promise(async (resolve, _reject) => {\r\n\t\t\tconst data = await this.dbFind(query);\r\n\t\t\tif (data) {\r\n\t\t\t\tresolve(data[0]);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(false);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tdbSave = (data: object) => {\r\n\t\tconst folder = 'tmp';\r\n\t\tconst file = `${folder}/notion-${this.storage}.json`;\r\n\r\n\t\tif (!fs.existsSync(folder)) {\r\n\t\t\tfs.mkdirSync(folder);\r\n\t\t}\r\n\t\tfs.writeFileSync(file, JSON.stringify(data, null, 2));\r\n\t};\r\n\r\n\tdbinsert = async (data: object) => {\r\n\t\tconst db = await this.dbGet();\r\n\t\tdb.push(data);\r\n\t\tthis.dbSave(db);\r\n\t};\r\n\r\n\tdbDelete = (query: { [key: string]: string | number | boolean }) => {\r\n\t\treturn new Promise(async (resolve, _reject) => {\r\n\t\t\tconst data = await this.dbGet();\r\n\t\t\tconst keys = Object.keys(query);\r\n\t\t\tconst values = Object.values(query);\r\n\t\t\tconst result = data.filter((item) => {\r\n\t\t\t\tlet valid = true;\r\n\t\t\t\tkeys.forEach((key, index) => {\r\n\t\t\t\t\tif (item[key] == values[index]) {\r\n\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn valid;\r\n\t\t\t});\r\n\t\t\tthis.dbSave(result);\r\n\t\t\tresolve(result);\r\n\t\t});\r\n\t};\r\n\r\n\tdbUpdate = (query: { [key: string]: string | number | boolean }, data: object) => {\r\n\t\treturn new Promise(async (resolve, _reject) => {\r\n\t\t\tconst db = await this.dbGet();\r\n\t\t\tconst keys = Object.keys(query);\r\n\t\t\tconst values = Object.values(query);\r\n\t\t\tconst result = db.map((item) => {\r\n\t\t\t\tlet valid = true;\r\n\t\t\t\tkeys.forEach((key, index) => {\r\n\t\t\t\t\tif (item[key] == values[index]) {\r\n\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif (!valid) {\r\n\t\t\t\t\treturn { ...item, ...data };\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.dbSave(result);\r\n\t\t\tresolve(result);\r\n\t\t});\r\n\t};\r\n\r\n\tdbRemove = (query: { [key: string]: string | number | boolean }, propertie: string) => {\r\n\t\treturn new Promise(async (resolve, _reject) => {\r\n\t\t\tconst db = await this.dbGet();\r\n\t\t\tconst keys = Object.keys(query);\r\n\t\t\tconst values = Object.values(query);\r\n\t\t\tconst result = db.map((item) => {\r\n\t\t\t\tlet valid = true;\r\n\t\t\t\tkeys.forEach((key, index) => {\r\n\t\t\t\t\tif (item[key] == values[index]) {\r\n\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif (!valid) {\r\n\t\t\t\t\tdelete item[propertie];\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.dbSave(result);\r\n\t\t\tresolve(result);\r\n\t\t});\r\n\t};\r\n\r\n\tdbCreate = () => {\r\n\t\tthis.getRows().then((rows: any) => {\r\n\t\t\tconst data = this.parseRows(rows.results);\r\n\t\t\tthis.dbSave(data);\r\n\t\t});\r\n\t};\r\n\r\n\tdbReload = () => {\r\n\t\tthis.dbCreate();\r\n\t};\r\n\r\n\t_exists = () => {\r\n\t\tconst folder = 'tmp';\r\n\t\tconst file = `${folder}/notion-${this.storage}.json`;\r\n\r\n\t\tif (!fs.existsSync(folder)) {\r\n\t\t\tconsole.log('Folder not exists');\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!fs.existsSync(file)) {\r\n\t\t\tconsole.log('File not exists');\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n}\r\n\r\nexport { NotionService };\r\n"]}