{"version":3,"file":"Sqlite.js","sourceRoot":"","sources":["../../src/libs/Sqlite.ts"],"names":[],"mappings":"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","sourcesContent":["declare namespace sqlite3 {\r\n\texport interface Database {\r\n\t\trun(query: string, callback?: (err?: Error) => void): this;\r\n\t\tget(query: string, callback?: (err?: Error, row?: any) => any): this;\r\n\t\tall(query: string, callback?: (err?: Error, rows?: any[]) => void): this;\r\n\t}\r\n}\r\n\r\ninterface Model {\r\n\t[key: string]: string;\r\n}\r\n\r\nclass Memoria<T extends Model> {\r\n\ttable: string;\r\n\tmodel: T;\r\n\tdb: sqlite3.Database;\r\n\r\n\tconstructor(table: string, model: T, database: sqlite3.Database) {\r\n\t\tthis.table = table;\r\n\t\tthis.model = model;\r\n\t\tthis.db = database;\r\n\t\tthis.db.run(\r\n\t\t\t`CREATE TABLE IF NOT EXISTS ${this.table} (${Object.keys(this.model)\r\n\t\t\t\t.map((key) => `${key} ${this.model[key]}`)\r\n\t\t\t\t.join(', ')})`\r\n\t\t);\r\n\t\tconst columns = Object.keys(this.model);\r\n\t\tthis.db.all(`PRAGMA table_info(${this.table})`, (err, rows) => {\r\n\t\t\tif (err) throw err;\r\n\t\t\tconst dbColumns = (rows as { name: string }[]).map((row) => row.name);\r\n\t\t\tconst newColumns = columns.filter(\r\n\t\t\t\t(column) => !dbColumns.includes(column)\r\n\t\t\t);\r\n\t\t\tif (newColumns.length > 0) {\r\n\t\t\t\tnewColumns.forEach((column) => {\r\n\t\t\t\t\tthis.db.run(\r\n\t\t\t\t\t\t`ALTER TABLE ${this.table} ADD COLUMN ${column} ${this.model[column]}`\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tfind(query: Partial<T>, options?: {limit: number}): Promise<Partial<T> | undefined> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet sql = `SELECT * FROM ${this.table} WHERE ${this.parseQuery(query)}`\r\n\t\t\tif(options && options.limit) sql += ` LIMIT ${options.limit}`\r\n\t\t\tthis.db.get(sql,\r\n\t\t\t\t(err: Error | undefined, row: object | undefined) => {\r\n\t\t\t\t\tif (err) reject(err);\r\n\t\t\t\t\telse resolve(row);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tfindAll(query?: Partial<T>, options?: {limit: number}): Promise<Partial<T>[]> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tif (query) {\r\n\t\t\t\tlet sql = `SELECT * FROM ${this.table} WHERE ${this.parseQuery(query)}`\r\n\t\t\t\tif(options && options.limit) sql += ` LIMIT ${options.limit}`\r\n\t\t\t\tthis.db.all(\r\n\t\t\t\t\tsql,\r\n\t\t\t\t\t(err: Error | undefined, rows: object[] | undefined) => {\r\n\t\t\t\t\t\tif (err) reject(err);\r\n\t\t\t\t\t\telse resolve(rows as any);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tlet sql = `SELECT * FROM ${this.table}`\r\n\t\t\t\tif(options && options.limit) sql += ` LIMIT ${options.limit}`\r\n\t\t\t\tthis.db.all(sql,\r\n\t\t\t\t\t(err: Error | undefined, rows: object[] | undefined) => {\r\n\t\t\t\t\t\tif (err) reject(err);\r\n\t\t\t\t\t\telse resolve(rows as any);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tinsert(data: Partial<T>): Promise<void> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.db.run(\r\n\t\t\t\t`INSERT INTO ${this.table} (${this.parseData(\r\n\t\t\t\t\tdata,\r\n\t\t\t\t\t'keys'\r\n\t\t\t\t)}) VALUES (${this.parseData(data, 'values')})`,\r\n\t\t\t\t(err: Error | undefined) => {\r\n\t\t\t\t\tif (err) reject(err);\r\n\t\t\t\t\telse resolve(data as any);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tupdate(query: Partial<T>, data: Partial<T>): Promise<void> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.db.run(\r\n\t\t\t\t`UPDATE ${this.table} SET ${this.parseData(\r\n\t\t\t\t\tdata,\r\n\t\t\t\t\t'update'\r\n\t\t\t\t)} WHERE ${this.parseQuery(query)}`,\r\n\t\t\t\t(err: Error | undefined) => {\r\n\t\t\t\t\tif (err) reject(err);\r\n\t\t\t\t\telse resolve();\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tupsert(query: Partial<T>, data: Partial<T>): Promise<void> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.find(query)\r\n\t\t\t\t.then((row) => {\r\n\t\t\t\t\tif (row) this.update(query, data).then(resolve).catch(reject);\r\n\t\t\t\t\telse this.insert(data).then(resolve).catch(reject);\r\n\t\t\t\t})\r\n\t\t\t\t.catch(reject);\r\n\t\t});\r\n\t}\r\n\r\n\tdelete(query: Partial<T>): Promise<void> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.db.run(\r\n\t\t\t\t`DELETE FROM ${this.table} WHERE ${this.parseData(query, 'update')}`,\r\n\t\t\t\t(err: Error | undefined) => {\r\n\t\t\t\t\tif (err) reject(err);\r\n\t\t\t\t\telse resolve();\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tdeleteAll(): Promise<void> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.db.run(`DELETE FROM ${this.table}`, (err: Error | undefined) => {\r\n\t\t\t\tif (err) reject(err);\r\n\t\t\t\telse resolve();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tdrop(): Promise<void> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.db.run(`DROP TABLE ${this.table}`, (err: Error | undefined) => {\r\n\t\t\t\tif (err) reject(err);\r\n\t\t\t\telse resolve();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tparseData(data: any, type: 'keys' | 'values' | 'update'): any {\r\n\t\tif (type === 'keys') return Object.keys(data).join(', ');\r\n\t\telse if (type === 'values')\r\n\t\t\treturn Object.values(data)\r\n\t\t\t\t.map((value) => `'${value}'`)\r\n\t\t\t\t.join(', ');\r\n\t\telse if (type === 'update')\r\n\t\t\treturn Object.keys(data)\r\n\t\t\t\t.map((key) => `${key} = \"${data[key]}\"`)\r\n\t\t\t\t.join(', ');\r\n\t}\r\n\r\n\tparseQuery(query: any) {\r\n\t\tconst keys = Object.keys(query);\r\n\t\tconst values = Object.values(query);\r\n\t\treturn keys\r\n\t\t\t.map((key, index) => `${key} = \"${values[index]}\"`)\r\n\t\t\t.join(' AND ');\r\n\t}\r\n}\r\n\r\nexport { Memoria };\r\n"]}