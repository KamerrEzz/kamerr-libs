{"version":3,"file":"Sqlite.js","sourceRoot":"","sources":["../../src/libs/Sqlite.ts"],"names":[],"mappings":"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","sourcesContent":["declare namespace sqlite3 {\r\n  export interface Database {\r\n    run(query: string, callback?: (err?: Error) => void): this;\r\n    get(query: string, callback?: (err?: Error, row?: any) => any): this;\r\n    all(query: string, callback?: (err?: Error, rows?: any[]) => void): this;\r\n  }\r\n}\r\n\r\ninterface Model {\r\n  [key: string]: string;\r\n  }\r\n\r\nclass Memoria<T extends Model> {\r\n  table: string;\r\n  model: T;\r\n  db: sqlite3.Database;\r\n\r\n  constructor(table: string, model: T, database: sqlite3.Database) {\r\n    this.table = table;\r\n    this.model = model\r\n    this.db = database;\r\n    this.db.run(`CREATE TABLE IF NOT EXISTS ${this.table} (${Object.keys(this.model).map(key => `${key} ${this.model[key]}`).join(\", \")})`);\r\n    const columns = Object.keys(this.model);\r\n    this.db.all(`PRAGMA table_info(${this.table})`, (err, rows) => {\r\n      if (err) throw err;\r\n      const dbColumns = (rows as { name: string }[]).map(row => row.name);\r\n      const newColumns = columns.filter(column => !dbColumns.includes(column));\r\n      if (newColumns.length > 0) {\r\n        newColumns.forEach(column => {\r\n          this.db.run(`ALTER TABLE ${this.table} ADD COLUMN ${column} ${this.model[column]}`);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  find(query: Partial<T>): Promise<Partial<T> | undefined> {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.get(`SELECT * FROM ${this.table} WHERE ${query}`, (err: Error | undefined, row: object | undefined) => {\r\n        if (err) reject(err);\r\n        else resolve(row);\r\n      });\r\n    });\r\n  }\r\n\r\n  findAll(query: Partial<T>): Promise<Partial<T>[]> {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.all(`SELECT * FROM ${this.table} WHERE ${query}`, (err: Error | undefined, rows: object[] | undefined) => {\r\n        if (err) reject(err);\r\n        else resolve(rows as any);\r\n      });\r\n    });\r\n  }\r\n\r\n  insert(data: Partial<T>): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.run(`INSERT INTO ${this.table} (${Object.keys(data)}) VALUES (${Object.values(data)})`, (err: Error | undefined) => {\r\n        if (err) reject(err);\r\n        else resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  update(query: Partial<T>, data: Partial<T>): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.run(`UPDATE ${this.table} SET ${data} WHERE ${query}`, (err: Error | undefined) => {\r\n        if (err) reject(err);\r\n        else resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  upsert(query: Partial<T>, data: Partial<T>): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.run(`INSERT INTO ${this.table} (${Object.keys(data).join(\", \")}) \r\n                   VALUES (${Object.values(data).map(value => `\"${value}\"`).join(\", \")})\r\n                   ON CONFLICT (${Object.keys(query).join(\", \")})\r\n                   DO UPDATE SET ${Object.keys(data).map(key => `${key} = \"${data[key]}\"`).join(\", \")}`,\r\n                   (err: Error | undefined) => {\r\n        if (err) reject(err);\r\n        else resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  delete(query: Partial<T>): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.run(`DELETE FROM ${this.table} WHERE ${query}`, (err: Error | undefined) => {\r\n        if (err) reject(err);\r\n        else resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  deleteAll(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.run(`DELETE FROM ${this.table}`, (err: Error | undefined) => {\r\n        if (err) reject(err);\r\n        else resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  drop(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.run(`DROP TABLE ${this.table}`, (err: Error | undefined) => {\r\n        if (err) reject(err);\r\n        else resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport { Memoria };\r\n"]}